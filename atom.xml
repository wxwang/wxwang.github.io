<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vincent&#39;s blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http:/"/>
  <updated>2019-07-03T03:12:14.019Z</updated>
  <id>http:/</id>
  
  <author>
    <name>vincent</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>老男孩python开发-1</title>
    <link href="http:/2019/07/03/%E8%80%81%E7%94%B7%E5%AD%A9python%E5%BC%80%E5%8F%91-1-1/"/>
    <id>http:/2019/07/03/老男孩python开发-1-1/</id>
    <published>2019-07-03T03:08:31.000Z</published>
    <updated>2019-07-03T03:12:14.019Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-计算机硬件基本认知"><a href="#1-1-计算机硬件基本认知" class="headerlink" title="1.1 计算机硬件基本认知"></a>1.1 计算机硬件基本认知</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cpu:   中央处理器.   相当于人的大脑.运算中心,控制中心.</span><br><span class="line">内存:  临时存储数据.  优点:读取速度快。 缺点:容量小,造价高,断电即消失.</span><br><span class="line">硬盘:  长期存储数据.  优点:容量大,造价相对低,断电不消失。 缺点:读取速度慢.</span><br><span class="line">操作系统:统一管理计算机软硬件资源的程序</span><br></pre></td></tr></table></figure><p><img src="D:\周末四期\assets" alt="1557729534117">python</p><h3 id="1-2计算机文件大小单位"><a href="#1-2计算机文件大小单位" class="headerlink" title="1.2计算机文件大小单位"></a>1.2计算机文件大小单位</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">b = bit  位(比特)</span><br><span class="line">B = Byte 字节</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>Byte = <span class="number">8</span> bit   <span class="comment">#一个字节等于8位  可以简写成 1B = 8b</span></span><br><span class="line"><span class="number">1</span>KB = <span class="number">1024</span>B</span><br><span class="line"><span class="number">1</span>MB = <span class="number">1024</span>KB</span><br><span class="line"><span class="number">1</span>GB = <span class="number">1024</span>MB</span><br><span class="line"><span class="number">1</span>TB = <span class="number">1024</span>GB</span><br><span class="line"><span class="number">1</span>PB = <span class="number">1024</span>TB</span><br><span class="line"><span class="number">1</span>EB = <span class="number">1024</span>PB</span><br></pre></td></tr></table></figure><h3 id="1-3进制转换"><a href="#1-3进制转换" class="headerlink" title="1.3进制转换"></a>1.3进制转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">二进制:由<span class="number">2</span>个数字组成,有<span class="number">0</span> 和 <span class="number">1</span>     例:  <span class="number">0b101</span> </span><br><span class="line">八进制:由<span class="number">8</span>个数字组成,有<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>        例:  <span class="number">0o127</span> </span><br><span class="line">十进制:有<span class="number">10</span>个数字组成,有<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>   例:  <span class="number">250</span></span><br><span class="line">十六进制:有<span class="number">16</span>个数字组成,有<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,a,b,c,d,e,f(字母大小写都可以,分别代表<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>) 例:<span class="number">0xff</span>  <span class="number">0Xff</span>  <span class="number">0XFF</span></span><br></pre></td></tr></table></figure><h4 id="1-3-1-二进制-转化成-十进制"><a href="#1-3-1-二进制-转化成-十进制" class="headerlink" title="1.3.1 二进制 转化成 十进制"></a>1.3.1 二进制 转化成 十进制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例:0b10100101  </span></span><br><span class="line">运算:<span class="number">1</span>* <span class="number">2</span>^<span class="number">0</span> + <span class="number">0</span>* <span class="number">2</span>^<span class="number">1</span> + <span class="number">1</span>* <span class="number">2</span>^<span class="number">2</span> + <span class="number">0</span>* <span class="number">2</span>^<span class="number">3</span> + <span class="number">0</span>* <span class="number">2</span>^<span class="number">4</span> + <span class="number">1</span>* <span class="number">2</span>^<span class="number">5</span> + <span class="number">0</span>* <span class="number">2</span>^<span class="number">6</span> + <span class="number">1</span>* <span class="number">2</span>^<span class="number">7</span>= </span><br><span class="line"><span class="number">1</span> + <span class="number">0</span> + <span class="number">4</span> + <span class="number">0</span> + <span class="number">0</span> + <span class="number">32</span> + <span class="number">0</span> + <span class="number">128</span> = <span class="number">165</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-八进制-转化成-十进制"><a href="#1-3-2-八进制-转化成-十进制" class="headerlink" title="1.3.2 八进制 转化成 十进制"></a>1.3.2 八进制 转化成 十进制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例:0o127</span></span><br><span class="line">运算:<span class="number">7</span>*<span class="number">8</span>^<span class="number">0</span> + <span class="number">2</span>*<span class="number">8</span>^<span class="number">1</span> + <span class="number">1</span>*<span class="number">8</span>^<span class="number">2</span> = <span class="number">7</span>+<span class="number">16</span>+<span class="number">64</span> = <span class="number">87</span></span><br></pre></td></tr></table></figure><h4 id="1-3-3-十六进制-转化成-十进制"><a href="#1-3-3-十六进制-转化成-十进制" class="headerlink" title="1.3.3 十六进制 转化成 十进制"></a>1.3.3 十六进制 转化成 十进制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例:0xff</span></span><br><span class="line">运算:<span class="number">15</span>*<span class="number">16</span>^<span class="number">0</span> + <span class="number">15</span>*<span class="number">16</span>^<span class="number">1</span> = <span class="number">255</span></span><br></pre></td></tr></table></figure><h4 id="小练习-转化成对应进制"><a href="#小练习-转化成对应进制" class="headerlink" title="*小练习: 转化成对应进制"></a>*小练习: 转化成对应进制</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">723 =&gt; 2 </span><br><span class="line">654 =&gt; 2</span><br><span class="line">723 =&gt; 8  </span><br><span class="line">654 =&gt; 8</span><br><span class="line">723 =&gt; 16 </span><br><span class="line">654 =&gt; 16</span><br></pre></td></tr></table></figure><h4 id="1-3-4-十进制-转化成-二进制"><a href="#1-3-4-十进制-转化成-二进制" class="headerlink" title="1.3.4 十进制 转化成 二进制"></a>1.3.4 十进制 转化成 二进制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">426 =&gt; 0b110101010  </span><br><span class="line">运算过程:   用<span class="number">426</span>除以<span class="number">2</span>,得出的结果再去不停地除以<span class="number">2</span>,</span><br><span class="line">直到除完最后的结果小于<span class="number">2</span>停止,</span><br><span class="line">在把每个阶段求得的余数从下到上依次拼接完毕即可</span><br></pre></td></tr></table></figure><h4 id="1-3-5-十进制-转化成-八进制"><a href="#1-3-5-十进制-转化成-八进制" class="headerlink" title="1.3.5 十进制 转化成 八进制"></a>1.3.5 十进制 转化成 八进制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">426 =&gt; 0o652</span><br><span class="line">运算过程:   用<span class="number">426</span>除以<span class="number">8</span>,得出的结果再去不停地除以<span class="number">8</span>,</span><br><span class="line">直到除完最后的结果小于<span class="number">8</span>停止,</span><br><span class="line">在把每个阶段求得的余数从下到上依次拼接完毕即可</span><br></pre></td></tr></table></figure><h4 id="1-3-6-十进制-转化成-十六进制"><a href="#1-3-6-十进制-转化成-十六进制" class="headerlink" title="1.3.6 十进制 转化成 十六进制"></a>1.3.6 十进制 转化成 十六进制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">运算过程:   用<span class="number">426</span>除以<span class="number">16</span>,得出的结果再去不停地除以<span class="number">16</span>,</span><br><span class="line">直到除完最后的结果小于<span class="number">16</span>停止,</span><br><span class="line">在把每个阶段求得的余数从下到上依次拼接完毕即可</span><br></pre></td></tr></table></figure><h4 id="小练习-转化成对应进制-1"><a href="#小练习-转化成对应进制-1" class="headerlink" title="*小练习: 转化成对应进制"></a>*小练习: 转化成对应进制</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">723 =&gt; 2 </span><br><span class="line">654 =&gt; 2</span><br><span class="line">723 =&gt; 8  </span><br><span class="line">654 =&gt; 8</span><br><span class="line">723 =&gt; 16 </span><br><span class="line">654 =&gt; 16</span><br></pre></td></tr></table></figure><h4 id="1-3-7-二进制与八进制转换"><a href="#1-3-7-二进制与八进制转换" class="headerlink" title="1.3.7  二进制与八进制转换"></a>1.3.7  二进制与八进制转换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">二进制与八进制对应关系:</span><br><span class="line">八进制  二进制</span><br><span class="line">0000</span><br><span class="line">1001</span><br><span class="line">2010</span><br><span class="line">3011</span><br><span class="line">4100</span><br><span class="line">5101</span><br><span class="line">6110</span><br><span class="line">7111</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例:1010100101</span><br><span class="line">八进制:从右向左 3位一隔开 不够三位用0补位 变成:</span><br><span class="line">001 010 100 101</span><br><span class="line">0o   1    2   4   5</span><br></pre></td></tr></table></figure><h4 id="1-3-8-二进制与十六进制转换"><a href="#1-3-8-二进制与十六进制转换" class="headerlink" title="1.3.8  二进制与十六进制转换"></a>1.3.8  二进制与十六进制转换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">十六进制  二进制</span><br><span class="line">0  0000</span><br><span class="line">1  0001</span><br><span class="line">2  0010</span><br><span class="line">3  0011</span><br><span class="line">4  0100</span><br><span class="line">5  0101</span><br><span class="line">6  0110</span><br><span class="line">7  0111</span><br><span class="line">8  1000</span><br><span class="line">9  1001</span><br><span class="line">a  1010</span><br><span class="line">b  1011</span><br><span class="line">c  1100</span><br><span class="line">d  1101</span><br><span class="line">e  1110</span><br><span class="line">f  1111</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例:1010100101</span><br><span class="line">十六进制:从右向左 4位一隔开 不够四位用0补位 变成:</span><br><span class="line">0010 1010 0101 </span><br><span class="line">0x2a5</span><br></pre></td></tr></table></figure><h4 id="1-3-9-八进制-与-十六进制的转换"><a href="#1-3-9-八进制-与-十六进制的转换" class="headerlink" title="1.3.9 八进制 与 十六进制的转换"></a>1.3.9 八进制 与 十六进制的转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先转换成二进制 再去对应转换 </span><br><span class="line">比如:<span class="number">0x2a5</span> 转换成 <span class="number">1010100101</span> 再转<span class="number">8</span>进制 <span class="number">0o1245</span></span><br></pre></td></tr></table></figure><h4 id="小练习-转化成对应进制-2"><a href="#小练习-转化成对应进制-2" class="headerlink" title="*小练习: 转化成对应进制"></a>*小练习: 转化成对应进制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x1DD =&gt; 8 </span><br><span class="line">0x29a =&gt; 8</span><br><span class="line">0o573 =&gt; 16</span><br><span class="line">0o336 =&gt; 16</span><br></pre></td></tr></table></figure><h3 id="1-4原码-反码-补码"><a href="#1-4原码-反码-补码" class="headerlink" title="1.4原码,反码,补码"></a>1.4原码,反码,补码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 1.原码 或 补码 都是用来表达二进制数据  </span><br><span class="line">    原码: 用来转换对应进制 </span><br><span class="line">    反码: 二进制码0变1,1变0叫做反码,反码用于原码补码之间的转换.(首位符号位不变)</span><br><span class="line">    补码: 用来做数据的存储和运算. 补码的提出用于表达一个数的正负（实现减法）    </span><br><span class="line"></span><br><span class="line">    计算机的所有数据在底层都是以二进制的[补码]形式存储</span><br><span class="line">    实际上人们看到的数字是[原码]转化来的</span><br><span class="line">    [原码] 和 [补码] 可以通过计算互相转化</span><br><span class="line"></span><br><span class="line"># 2.整体顺序：</span><br><span class="line">补码 -&gt; 原码 -&gt; 最后人们看到的数</span><br><span class="line">***进制转换的时候需要先把内存存储的补码拿出来变成原码在进行转换输出***</span><br><span class="line"></span><br><span class="line"># 3.运算规律：</span><br><span class="line">原码：正数高位补0  负数高位补1  (前面空白位全是1)</span><br><span class="line">    数字1   00000000 1  正数高位第一位补0</span><br><span class="line">    数字-1  10000000 1  负数高位第一位补1</span><br><span class="line"></span><br><span class="line">计算机默认只会做加法,实现减法用负号： 5+(-3) =&gt; 5-3</span><br><span class="line">乘法除法:是通过左移和右移 &lt;&lt; &gt;&gt; 来实现</span><br><span class="line"></span><br><span class="line"># 4.原码 与 反码之间的转换</span><br><span class="line">(原码 反码 补码之间的转换 , 符号位不要动)</span><br><span class="line">正数: 原码 = 反码 = 补码</span><br><span class="line">负数: 原码 = 补码取反加1   给补码求原码</span><br><span class="line">负数: 补码 = 原码取反加1   给原码求补码</span><br></pre></td></tr></table></figure><h4 id="小练习：原码-与-反码的转换"><a href="#小练习：原码-与-反码的转换" class="headerlink" title="*小练习：原码 与 反码的转换"></a>*小练习：原码 与 反码的转换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#给原码求补码</span><br><span class="line">    -6 的补码是多少? </span><br><span class="line">    6  的补码是多少?</span><br><span class="line">    10 的补码是多少?</span><br><span class="line">   -10 的补码是多少?</span><br><span class="line">     9 的补码是多少?</span><br><span class="line">    -9 的补码是多少?</span><br><span class="line">#给补码求原码</span><br><span class="line">1 ... 111  00011 (高位都是1) </span><br><span class="line">1 ... 111  0110010 (高位都是1) </span><br><span class="line"># 9+(-5) 用二进制相加运算一下</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-1-计算机硬件基本认知&quot;&gt;&lt;a href=&quot;#1-1-计算机硬件基本认知&quot; class=&quot;headerlink&quot; title=&quot;1.1 计算机硬件基本认知&quot;&gt;&lt;/a&gt;1.1 计算机硬件基本认知&lt;/h3&gt;&lt;figure class=&quot;highlight pyth
      
    
    </summary>
    
      <category term="后端" scheme="http:/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="python" scheme="http:/categories/%E5%90%8E%E7%AB%AF/python/"/>
    
    
      <category term="python" scheme="http:/tags/python/"/>
    
      <category term="进制转换" scheme="http:/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http:/2019/07/03/%E8%80%81%E7%94%B7%E5%AD%A9python%E5%BC%80%E5%8F%91-1/"/>
    <id>http:/2019/07/03/老男孩python开发-1/</id>
    <published>2019-07-03T03:00:22.189Z</published>
    <updated>2019-06-23T02:37:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-计算机硬件基本认知"><a href="#1-1-计算机硬件基本认知" class="headerlink" title="1.1 计算机硬件基本认知"></a>1.1 计算机硬件基本认知</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cpu:   中央处理器.   相当于人的大脑.运算中心,控制中心.</span><br><span class="line">内存:  临时存储数据.  优点:读取速度快。 缺点:容量小,造价高,断电即消失.</span><br><span class="line">硬盘:  长期存储数据.  优点:容量大,造价相对低,断电不消失。 缺点:读取速度慢.</span><br><span class="line">操作系统:统一管理计算机软硬件资源的程序</span><br></pre></td></tr></table></figure><p><img src="D:\周末四期\assets" alt="1557729534117">python</p><h3 id="1-2计算机文件大小单位"><a href="#1-2计算机文件大小单位" class="headerlink" title="1.2计算机文件大小单位"></a>1.2计算机文件大小单位</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">b = bit  位(比特)</span><br><span class="line">B = Byte 字节</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>Byte = <span class="number">8</span> bit   <span class="comment">#一个字节等于8位  可以简写成 1B = 8b</span></span><br><span class="line"><span class="number">1</span>KB = <span class="number">1024</span>B</span><br><span class="line"><span class="number">1</span>MB = <span class="number">1024</span>KB</span><br><span class="line"><span class="number">1</span>GB = <span class="number">1024</span>MB</span><br><span class="line"><span class="number">1</span>TB = <span class="number">1024</span>GB</span><br><span class="line"><span class="number">1</span>PB = <span class="number">1024</span>TB</span><br><span class="line"><span class="number">1</span>EB = <span class="number">1024</span>PB</span><br></pre></td></tr></table></figure><h3 id="1-3进制转换"><a href="#1-3进制转换" class="headerlink" title="1.3进制转换"></a>1.3进制转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">二进制:由<span class="number">2</span>个数字组成,有<span class="number">0</span> 和 <span class="number">1</span>     例:  <span class="number">0b101</span> </span><br><span class="line">八进制:由<span class="number">8</span>个数字组成,有<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>        例:  <span class="number">0o127</span> </span><br><span class="line">十进制:有<span class="number">10</span>个数字组成,有<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>   例:  <span class="number">250</span></span><br><span class="line">十六进制:有<span class="number">16</span>个数字组成,有<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,a,b,c,d,e,f(字母大小写都可以,分别代表<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>) 例:<span class="number">0xff</span>  <span class="number">0Xff</span>  <span class="number">0XFF</span></span><br></pre></td></tr></table></figure><h4 id="1-3-1-二进制-转化成-十进制"><a href="#1-3-1-二进制-转化成-十进制" class="headerlink" title="1.3.1 二进制 转化成 十进制"></a>1.3.1 二进制 转化成 十进制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例:0b10100101  </span></span><br><span class="line">运算:<span class="number">1</span>* <span class="number">2</span>^<span class="number">0</span> + <span class="number">0</span>* <span class="number">2</span>^<span class="number">1</span> + <span class="number">1</span>* <span class="number">2</span>^<span class="number">2</span> + <span class="number">0</span>* <span class="number">2</span>^<span class="number">3</span> + <span class="number">0</span>* <span class="number">2</span>^<span class="number">4</span> + <span class="number">1</span>* <span class="number">2</span>^<span class="number">5</span> + <span class="number">0</span>* <span class="number">2</span>^<span class="number">6</span> + <span class="number">1</span>* <span class="number">2</span>^<span class="number">7</span>= </span><br><span class="line"><span class="number">1</span> + <span class="number">0</span> + <span class="number">4</span> + <span class="number">0</span> + <span class="number">0</span> + <span class="number">32</span> + <span class="number">0</span> + <span class="number">128</span> = <span class="number">165</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-八进制-转化成-十进制"><a href="#1-3-2-八进制-转化成-十进制" class="headerlink" title="1.3.2 八进制 转化成 十进制"></a>1.3.2 八进制 转化成 十进制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例:0o127</span></span><br><span class="line">运算:<span class="number">7</span>*<span class="number">8</span>^<span class="number">0</span> + <span class="number">2</span>*<span class="number">8</span>^<span class="number">1</span> + <span class="number">1</span>*<span class="number">8</span>^<span class="number">2</span> = <span class="number">7</span>+<span class="number">16</span>+<span class="number">64</span> = <span class="number">87</span></span><br></pre></td></tr></table></figure><h4 id="1-3-3-十六进制-转化成-十进制"><a href="#1-3-3-十六进制-转化成-十进制" class="headerlink" title="1.3.3 十六进制 转化成 十进制"></a>1.3.3 十六进制 转化成 十进制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例:0xff</span></span><br><span class="line">运算:<span class="number">15</span>*<span class="number">16</span>^<span class="number">0</span> + <span class="number">15</span>*<span class="number">16</span>^<span class="number">1</span> = <span class="number">255</span></span><br></pre></td></tr></table></figure><h4 id="小练习-转化成对应进制"><a href="#小练习-转化成对应进制" class="headerlink" title="*小练习: 转化成对应进制"></a>*小练习: 转化成对应进制</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">723 =&gt; 2 </span><br><span class="line">654 =&gt; 2</span><br><span class="line">723 =&gt; 8  </span><br><span class="line">654 =&gt; 8</span><br><span class="line">723 =&gt; 16 </span><br><span class="line">654 =&gt; 16</span><br></pre></td></tr></table></figure><h4 id="1-3-4-十进制-转化成-二进制"><a href="#1-3-4-十进制-转化成-二进制" class="headerlink" title="1.3.4 十进制 转化成 二进制"></a>1.3.4 十进制 转化成 二进制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">426 =&gt; 0b110101010  </span><br><span class="line">运算过程:   用<span class="number">426</span>除以<span class="number">2</span>,得出的结果再去不停地除以<span class="number">2</span>,</span><br><span class="line">直到除完最后的结果小于<span class="number">2</span>停止,</span><br><span class="line">在把每个阶段求得的余数从下到上依次拼接完毕即可</span><br></pre></td></tr></table></figure><h4 id="1-3-5-十进制-转化成-八进制"><a href="#1-3-5-十进制-转化成-八进制" class="headerlink" title="1.3.5 十进制 转化成 八进制"></a>1.3.5 十进制 转化成 八进制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">426 =&gt; 0o652</span><br><span class="line">运算过程:   用<span class="number">426</span>除以<span class="number">8</span>,得出的结果再去不停地除以<span class="number">8</span>,</span><br><span class="line">直到除完最后的结果小于<span class="number">8</span>停止,</span><br><span class="line">在把每个阶段求得的余数从下到上依次拼接完毕即可</span><br></pre></td></tr></table></figure><h4 id="1-3-6-十进制-转化成-十六进制"><a href="#1-3-6-十进制-转化成-十六进制" class="headerlink" title="1.3.6 十进制 转化成 十六进制"></a>1.3.6 十进制 转化成 十六进制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">运算过程:   用<span class="number">426</span>除以<span class="number">16</span>,得出的结果再去不停地除以<span class="number">16</span>,</span><br><span class="line">直到除完最后的结果小于<span class="number">16</span>停止,</span><br><span class="line">在把每个阶段求得的余数从下到上依次拼接完毕即可</span><br></pre></td></tr></table></figure><h4 id="小练习-转化成对应进制-1"><a href="#小练习-转化成对应进制-1" class="headerlink" title="*小练习: 转化成对应进制"></a>*小练习: 转化成对应进制</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">723 =&gt; 2 </span><br><span class="line">654 =&gt; 2</span><br><span class="line">723 =&gt; 8  </span><br><span class="line">654 =&gt; 8</span><br><span class="line">723 =&gt; 16 </span><br><span class="line">654 =&gt; 16</span><br></pre></td></tr></table></figure><h4 id="1-3-7-二进制与八进制转换"><a href="#1-3-7-二进制与八进制转换" class="headerlink" title="1.3.7  二进制与八进制转换"></a>1.3.7  二进制与八进制转换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">二进制与八进制对应关系:</span><br><span class="line">八进制  二进制</span><br><span class="line">0000</span><br><span class="line">1001</span><br><span class="line">2010</span><br><span class="line">3011</span><br><span class="line">4100</span><br><span class="line">5101</span><br><span class="line">6110</span><br><span class="line">7111</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例:1010100101</span><br><span class="line">八进制:从右向左 3位一隔开 不够三位用0补位 变成:</span><br><span class="line">001 010 100 101</span><br><span class="line">0o   1    2   4   5</span><br></pre></td></tr></table></figure><h4 id="1-3-8-二进制与十六进制转换"><a href="#1-3-8-二进制与十六进制转换" class="headerlink" title="1.3.8  二进制与十六进制转换"></a>1.3.8  二进制与十六进制转换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">十六进制  二进制</span><br><span class="line">0  0000</span><br><span class="line">1  0001</span><br><span class="line">2  0010</span><br><span class="line">3  0011</span><br><span class="line">4  0100</span><br><span class="line">5  0101</span><br><span class="line">6  0110</span><br><span class="line">7  0111</span><br><span class="line">8  1000</span><br><span class="line">9  1001</span><br><span class="line">a  1010</span><br><span class="line">b  1011</span><br><span class="line">c  1100</span><br><span class="line">d  1101</span><br><span class="line">e  1110</span><br><span class="line">f  1111</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例:1010100101</span><br><span class="line">十六进制:从右向左 4位一隔开 不够四位用0补位 变成:</span><br><span class="line">0010 1010 0101 </span><br><span class="line">0x2a5</span><br></pre></td></tr></table></figure><h4 id="1-3-9-八进制-与-十六进制的转换"><a href="#1-3-9-八进制-与-十六进制的转换" class="headerlink" title="1.3.9 八进制 与 十六进制的转换"></a>1.3.9 八进制 与 十六进制的转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先转换成二进制 再去对应转换 </span><br><span class="line">比如:<span class="number">0x2a5</span> 转换成 <span class="number">1010100101</span> 再转<span class="number">8</span>进制 <span class="number">0o1245</span></span><br></pre></td></tr></table></figure><h4 id="小练习-转化成对应进制-2"><a href="#小练习-转化成对应进制-2" class="headerlink" title="*小练习: 转化成对应进制"></a>*小练习: 转化成对应进制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x1DD =&gt; 8 </span><br><span class="line">0x29a =&gt; 8</span><br><span class="line">0o573 =&gt; 16</span><br><span class="line">0o336 =&gt; 16</span><br></pre></td></tr></table></figure><h3 id="1-4原码-反码-补码"><a href="#1-4原码-反码-补码" class="headerlink" title="1.4原码,反码,补码"></a>1.4原码,反码,补码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 1.原码 或 补码 都是用来表达二进制数据  </span><br><span class="line">    原码: 用来转换对应进制 </span><br><span class="line">    反码: 二进制码0变1,1变0叫做反码,反码用于原码补码之间的转换.(首位符号位不变)</span><br><span class="line">    补码: 用来做数据的存储和运算. 补码的提出用于表达一个数的正负（实现减法）    </span><br><span class="line"></span><br><span class="line">    计算机的所有数据在底层都是以二进制的[补码]形式存储</span><br><span class="line">    实际上人们看到的数字是[原码]转化来的</span><br><span class="line">    [原码] 和 [补码] 可以通过计算互相转化</span><br><span class="line"></span><br><span class="line"># 2.整体顺序：</span><br><span class="line">补码 -&gt; 原码 -&gt; 最后人们看到的数</span><br><span class="line">***进制转换的时候需要先把内存存储的补码拿出来变成原码在进行转换输出***</span><br><span class="line"></span><br><span class="line"># 3.运算规律：</span><br><span class="line">原码：正数高位补0  负数高位补1  (前面空白位全是1)</span><br><span class="line">    数字1   00000000 1  正数高位第一位补0</span><br><span class="line">    数字-1  10000000 1  负数高位第一位补1</span><br><span class="line"></span><br><span class="line">计算机默认只会做加法,实现减法用负号： 5+(-3) =&gt; 5-3</span><br><span class="line">乘法除法:是通过左移和右移 &lt;&lt; &gt;&gt; 来实现</span><br><span class="line"></span><br><span class="line"># 4.原码 与 反码之间的转换</span><br><span class="line">(原码 反码 补码之间的转换 , 符号位不要动)</span><br><span class="line">正数: 原码 = 反码 = 补码</span><br><span class="line">负数: 原码 = 补码取反加1   给补码求原码</span><br><span class="line">负数: 补码 = 原码取反加1   给原码求补码</span><br></pre></td></tr></table></figure><h4 id="小练习：原码-与-反码的转换"><a href="#小练习：原码-与-反码的转换" class="headerlink" title="*小练习：原码 与 反码的转换"></a>*小练习：原码 与 反码的转换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#给原码求补码</span><br><span class="line">    -6 的补码是多少? </span><br><span class="line">    6  的补码是多少?</span><br><span class="line">    10 的补码是多少?</span><br><span class="line">   -10 的补码是多少?</span><br><span class="line">     9 的补码是多少?</span><br><span class="line">    -9 的补码是多少?</span><br><span class="line">#给补码求原码</span><br><span class="line">1 ... 111  00011 (高位都是1) </span><br><span class="line">1 ... 111  0110010 (高位都是1) </span><br><span class="line"># 9+(-5) 用二进制相加运算一下</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-1-计算机硬件基本认知&quot;&gt;&lt;a href=&quot;#1-1-计算机硬件基本认知&quot; class=&quot;headerlink&quot; title=&quot;1.1 计算机硬件基本认知&quot;&gt;&lt;/a&gt;1.1 计算机硬件基本认知&lt;/h3&gt;&lt;figure class=&quot;highlight pyth
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>老男孩python开发</title>
    <link href="http:/2019/07/02/%E8%80%81%E7%94%B7%E5%AD%A9python%E5%BC%80%E5%8F%91-2/"/>
    <id>http:/2019/07/02/老男孩python开发-2/</id>
    <published>2019-07-02T14:03:57.000Z</published>
    <updated>2019-07-03T03:14:08.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-简介-注释-变量-数据类型-运算符-缓存机制"><a href="#python-简介-注释-变量-数据类型-运算符-缓存机制" class="headerlink" title="python 简介 注释 变量 数据类型 运算符 缓存机制"></a>python 简介 注释 变量 数据类型 运算符 缓存机制</h1><h3 id="2-1python认知"><a href="#2-1python认知" class="headerlink" title="2.1python认知"></a>2.1python认知</h3><p><img src="D:\周末四期\L002\assets\1557736597833.png" alt="1557736597833"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### (1)python 简介</span></span><br><span class="line">    <span class="number">89</span>年开发的语言,创始人范罗苏姆(Guido van Rossum),别称:龟叔(Guido). </span><br><span class="line">    python具有非常多并且强大的第三方库,使得程序开发起来得心应手. </span><br><span class="line">    Python程序员的信仰:人生苦短,我用python!</span><br><span class="line">    开发方向： 机器学习人工智能 ，自动化运维&amp;测试 ，数据分析&amp;爬虫 ，python全栈开发</span><br><span class="line"> </span><br><span class="line"><span class="comment"># ### (2)python 版本</span></span><br><span class="line">    python <span class="number">2.</span>x 版本，官方在 <span class="number">2020</span> 年停止支持,原码不规范,重复较多</span><br><span class="line">    python <span class="number">3.</span>x 版本，功能更加强大且修复了很多bug,原码清晰,简单</span><br><span class="line"></span><br><span class="line"><span class="comment"># ### (3)编译型与解释型语言区别:</span></span><br><span class="line">编译型:一次性,把所有代码编译成机器能识别的二进制码,在运行</span><br><span class="line">代表语言:c,c++</span><br><span class="line">优点: 执行速度块</span><br><span class="line">缺点: 开发速度慢,调试周期长</span><br><span class="line"></span><br><span class="line">解释型:代码从上到下一行一行解释并运行 </span><br><span class="line">代表语言:python,php</span><br><span class="line">优点: 开发效率快,调试周期短</span><br><span class="line">缺点: 执行速度相对慢</span><br><span class="line">*linux 操作系统默认支持python语言，可直接使用</span><br><span class="line"></span><br><span class="line"><span class="comment"># ### (4)python的解释器:</span></span><br><span class="line">    (<span class="number">1</span>)Cpython(官方推荐)</span><br><span class="line">    把python转化成c语言能识别的二进制码</span><br><span class="line">    (<span class="number">2</span>)Jpython</span><br><span class="line">    把python转化成java语言能识别的二进制码</span><br><span class="line">    (<span class="number">3</span>)其他语言解释器</span><br><span class="line">    把python转化成其他语言能识别的二进制码</span><br><span class="line">    (<span class="number">4</span>)PyPy</span><br><span class="line">    将所有代码一次性编译成二进制码,加快执行效率(模仿编译型语言的一款python解释器)</span><br></pre></td></tr></table></figure><h3 id="2-2注释-就是对代码的解释-方便大家阅读python代码"><a href="#2-2注释-就是对代码的解释-方便大家阅读python代码" class="headerlink" title="2.2注释: 就是对代码的解释 方便大家阅读python代码"></a>2.2注释: 就是对代码的解释 方便大家阅读python代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)注释的分类</span><br><span class="line">(<span class="number">2</span>)注释的注意点</span><br><span class="line">(<span class="number">3</span>)注释的排错性</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)注释的分类 ： <span class="number">1.</span>单行注释 <span class="number">2.</span>多行注释</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.单行注释   以#号开头 ，右边的所有东西都被当做说明文字 ，程序不进行编译运行。</span></span><br><span class="line">    print(‘hello world’)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2.多行注释   三个单引号 或 三个双引号</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    这是第一行</span></span><br><span class="line"><span class="string">    这是第二行</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    </span><br><span class="line">(<span class="number">2</span>)注释的注意点</span><br><span class="line">如果外面使用三个单引号，里面使用三个双引号，反之亦然。</span><br><span class="line">(<span class="number">3</span>)注释的排错性</span><br><span class="line">先注释一部分代码，然后执行另外一部分，看看是否报错，逐层缩小报错范围，找到最终错误点。</span><br></pre></td></tr></table></figure><h3 id="2-3变量-可以改变的量-实际具体指的是内存中的一块存储空间"><a href="#2-3变量-可以改变的量-实际具体指的是内存中的一块存储空间" class="headerlink" title="2.3变量: 可以改变的量,实际具体指的是内存中的一块存储空间"></a>2.3变量: 可以改变的量,实际具体指的是内存中的一块存储空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1)变量的概念</span><br><span class="line">(2)变量的声明</span><br><span class="line">(3)变量的命名</span><br><span class="line">(4)变量的交换</span><br><span class="line"></span><br><span class="line">* 常量就是不可改变的量,python当中没有明确定义常量的关键字,</span><br><span class="line">  所以约定俗成把变量名大写就是常量,表示不可改变</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)变量的概念: 可以改变的量就是变量。具体指代的是内存的一块空间</span><br><span class="line">(<span class="number">2</span>)变量的声明:</span><br><span class="line"><span class="comment">#1. a = 1 , b = 2</span></span><br><span class="line"><span class="comment">#2. a,b = 1,2</span></span><br><span class="line"><span class="comment">#3. a = b = 3</span></span><br><span class="line">(<span class="number">3</span>)变量的命名:</span><br><span class="line">    <span class="comment">#字母数字下划线 ，首字符不能为数字</span></span><br><span class="line">    <span class="comment">#严格区分大小写 ，且不能使用关键字</span></span><br><span class="line">    <span class="comment">#变量命名有意义 ，且不能使用中文哦</span></span><br><span class="line">(<span class="number">4</span>)变量的交换:</span><br><span class="line">    <span class="comment">#a,b = b,a</span></span><br></pre></td></tr></table></figure><h3 id="2-4python六大标准数据类型"><a href="#2-4python六大标准数据类型" class="headerlink" title="2.4python六大标准数据类型:"></a>2.4python六大标准数据类型:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 数据类型分类：</span></span><br><span class="line">(<span class="number">1</span>)Number   数字类型 (int  float  bool  complex)</span><br><span class="line">(<span class="number">2</span>)str    字符串类型    </span><br><span class="line">(<span class="number">3</span>)list列表类型      </span><br><span class="line">(<span class="number">4</span>)tuple元组类型     </span><br><span class="line">(<span class="number">5</span>)set集合类型     </span><br><span class="line">(<span class="number">6</span>)dict字典类型      </span><br><span class="line"></span><br><span class="line"><span class="comment"># ### Number数字类型分类：</span></span><br><span class="line">int :    整数类型    ( 正整数 <span class="number">0</span> 负整数 )</span><br><span class="line">float:   浮点数类型  ( <span class="number">1</span>普通小数 <span class="number">2</span>科学计数法表示的小数 例:a = <span class="number">3e-5</span>  <span class="comment">#3e-05 )</span></span><br><span class="line">bool:    布尔值类型  ( 真<span class="literal">True</span> 和 假<span class="literal">False</span> )</span><br><span class="line">complex: 复数类型    ( 声明复数的<span class="number">2</span>种方法 ) (复数用作于科学计算中,表示高精度的数据,科学家会使用)</span><br><span class="line">                    </span><br><span class="line"><span class="comment"># ### 容器类型分类：五个</span></span><br><span class="line">str   <span class="string">"nihao"</span></span><br><span class="line">list   [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">tuple  (<span class="number">6</span>，<span class="number">7</span>，<span class="number">8</span>)</span><br><span class="line">set    &#123;<span class="string">'a'</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">dict   &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-1自动类型转换"><a href="#2-4-1自动类型转换" class="headerlink" title="2.4.1自动类型转换"></a>2.4.1自动类型转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当<span class="number">2</span>个不同类型的数据进行运算的时候,默认向更高精度转换</span><br><span class="line">数据类型精度从低到高:  bool int float complex</span><br></pre></td></tr></table></figure><h4 id="2-4-2强制类型转换"><a href="#2-4-2强制类型转换" class="headerlink" title="2.4.2强制类型转换"></a>2.4.2强制类型转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --&gt;Number部分</span></span><br><span class="line">int :     整型   浮点型 布尔类型  纯数字字符串</span><br><span class="line">float:    整型   浮点型 布尔类型  纯数字字符串</span><br><span class="line">complex:  整型   浮点型 布尔类型  纯数字字符串 (复数)</span><br><span class="line">bool:   ( 容器类型数据  /  Number类型数据 都可以 )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --&gt;容器类型部分</span></span><br><span class="line">str:  ( 容器类型数据  /  Number类型数据 都可以 )</span><br><span class="line">list:    字符串 列表 元组 集合 字典</span><br><span class="line">tuple:   字符串 列表 元组 集合 字典</span><br><span class="line">set:     字符串 列表 元组 集合 字典    (注意:相同的值,只会保留一份)</span><br><span class="line">dict:  使用 二级列表,二级元组,二级集合(里面的容器数据只能是元组)</span><br></pre></td></tr></table></figure><h4 id="2-4-3字典和集合的注意点"><a href="#2-4-3字典和集合的注意点" class="headerlink" title="2.4.3字典和集合的注意点"></a>2.4.3字典和集合的注意点</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ###哈希算法</span></span><br><span class="line"><span class="comment">#定义:</span></span><br><span class="line">    把不可变的任意长度值计算成固定长度的唯一值,这个值可正可负,可大可小,但长度固定</span><br><span class="line">    该算法叫哈希算法(散列算法)，这个固定长度值叫哈希值(散列值)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#特点:</span></span><br><span class="line"><span class="number">1.</span>计算出来的值长度固定且该值唯一</span><br><span class="line">    <span class="number">2.</span>该字符串是密文，且加密过程不可逆</span><br><span class="line">    </span><br><span class="line"><span class="comment">#用哈希计算得到一个字符串的用意？</span></span><br><span class="line">    例如：比对两个文件的内容是否一致？</span><br><span class="line">    例如：比对输入的密码和数据库存储的密码是否一致</span><br><span class="line">    </span><br><span class="line"><span class="comment">#字典的键和集合中的值都是唯一值,不可重复:</span></span><br><span class="line">为了保证数据的唯一性，</span><br><span class="line">    用哈希算法加密字典的键得到一个字符串。</span><br><span class="line">    用哈希算法加密集合的值得到一个字符串。</span><br><span class="line">如果重复，他们都是后面的替换前面的。自动去重</span><br><span class="line"></span><br><span class="line"><span class="comment">#版本:</span></span><br><span class="line">    <span class="number">3.6</span>版本之前都是 字典和集合都是无序的</span><br><span class="line">    <span class="number">3.6</span>版本之后,把字典的字面顺序记录下来，当从内存拿数据的时候，</span><br><span class="line">    根据字面顺序重新排序，所以看起来像有序,但本质上无序</span><br><span class="line"></span><br><span class="line">可哈希数据:</span><br><span class="line">可哈希的数据  (不可变的数据)：Number(int float bool complex) str tuple</span><br><span class="line">不可哈希的数据 (可变的数据)： list set dict</span><br></pre></td></tr></table></figure><h3 id="2-5python运算符"><a href="#2-5python运算符" class="headerlink" title="2.5python运算符"></a>2.5python运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)算数运算符:  + - * / // % **</span><br><span class="line">(<span class="number">2</span>)比较运算符:  &gt; &lt; &gt;= &lt;= == !=   </span><br><span class="line">(<span class="number">3</span>)赋值运算符:  = += -= *= /= //= %= **=</span><br><span class="line">(<span class="number">4</span>)成员运算符:  <span class="keyword">in</span> 和 <span class="keyword">not</span> <span class="keyword">in</span> (针对于容器型数据)</span><br><span class="line">(<span class="number">5</span>)身份运算符:  <span class="keyword">is</span> 和 <span class="keyword">is</span> <span class="keyword">not</span> (检测两个数据在内存当中是否是同一个值)  </span><br><span class="line">(<span class="number">6</span>)逻辑运算符:  <span class="keyword">and</span> <span class="keyword">or</span> <span class="keyword">not</span></span><br><span class="line">(<span class="number">7</span>)位运算符:    &amp; | ~ ^ &lt;&lt; &gt;&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>python运算符</th><th>注意点</th></tr></thead><tbody><tr><td>算数运算符</td><td>% 取余   ， //地板除  ， ** 幂运算</td></tr><tr><td>比较运算符</td><td>== 比较两个值是否相等    != 比较两个值是否不同</td></tr><tr><td>赋值运算符</td><td>a += 1  =&gt;  a = a+1</td></tr><tr><td>成员运算符</td><td>in 或 not in 判断某个值是否包含在(或不在)一个容器类型数据当中</td></tr><tr><td>身份运算符</td><td>is 和 is not  用来判断内存地址是否相同</td></tr><tr><td>逻辑运算符</td><td>优先级 () &gt; not &gt; and  &gt; or</td></tr><tr><td>位运算符</td><td>优先级 (&lt;&lt;或 &gt;&gt; )  &gt; &amp;  &gt;  ^  &gt; \</td><td>5 &lt;&lt; 1 结果：10  ,   5 &gt;&gt; 1 结果：2</td></tr></tbody></table><h3 id="2-6数据在内存中的缓存机制"><a href="#2-6数据在内存中的缓存机制" class="headerlink" title="2.6数据在内存中的缓存机制"></a>2.6数据在内存中的缓存机制</h3><h4 id="2-6-1在同一文件-模块-里-变量存储的缓存机制-仅对python3-6版本负责"><a href="#2-6-1在同一文件-模块-里-变量存储的缓存机制-仅对python3-6版本负责" class="headerlink" title="2.6.1在同一文件(模块)里,变量存储的缓存机制  (仅对python3.6版本负责)"></a>2.6.1在同一文件(模块)里,变量存储的缓存机制  (仅对python3.6版本负责)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --&gt;Number 部分</span></span><br><span class="line"><span class="number">1.</span>对于整型而言，<span class="number">-5</span>~正无穷范围内的相同值 id一致</span><br><span class="line"><span class="number">2.</span>对于浮点数而言，非负数范围内的相同值 id一致</span><br><span class="line"><span class="number">3.</span>布尔值而言,值相同情况下，id一致</span><br><span class="line"><span class="number">4.</span>复数在 实数+虚数 这样的结构中永不相同(只有虚数的情况例外)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --&gt;容器类型部分</span></span><br><span class="line"><span class="number">5.</span>字符串 和 空元组 相同的情况下，地址相同</span><br><span class="line"><span class="number">6.</span>列表，元组，字典，集合无论什么情况 id标识都不同 [空元组例外]</span><br></pre></td></tr></table></figure><h4 id="2-6-2不同文件-模块-里-部分数据驻留小数据池中-仅对python3-6版本负责-了解"><a href="#2-6-2不同文件-模块-里-部分数据驻留小数据池中-仅对python3-6版本负责-了解" class="headerlink" title="2.6.2不同文件(模块)里,部分数据驻留小数据池中 (仅对python3.6版本负责 了解)"></a>2.6.2不同文件(模块)里,部分数据驻留小数据池中 (仅对python3.6版本负责 了解)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">小数据池只针对：int,str,bool，空元祖(),<span class="literal">None</span>关键字   这些数据类型有效</span><br><span class="line"><span class="comment">#(1)对于int而言</span></span><br><span class="line">    python在内存中创建了<span class="number">-5</span> ~ <span class="number">256</span> 范围的整数,提前驻留在了内存的一块区域.</span><br><span class="line">    如果是不同文件(模块)的两个变量,声明同一个值，在<span class="number">-5</span>~<span class="number">256</span>这个范围里，</span><br><span class="line">    那么id一致.让两个变量的值都同时指向一个值的地址，节省空间。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#(2)对于str来说:</span></span><br><span class="line"><span class="number">1.</span>字符串的长度为<span class="number">0</span>或者<span class="number">1</span>，默认驻留小数据池</span><br></pre></td></tr></table></figure><p><img src="D:\周末四期\L002\assets\1557740809484.png" alt="1557740809484"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>字符串的长度&gt;<span class="number">1</span>,且只含有大小写字母，数字，下划线时，默认驻留小数据池</span><br></pre></td></tr></table></figure></p><p><img src="D:\周末四期\L002\assets\1557740921885.png" alt="1557740921885"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>用*号得到的字符串，分两种情况。</span><br><span class="line">       <span class="number">1</span>)乘数等于<span class="number">1</span>时: 无论什么字符串 * <span class="number">1</span> , 都默认驻留小数据池       </span><br><span class="line">       <span class="number">2</span>)乘数大于<span class="number">1</span>时: 乘数大于<span class="number">1</span>，仅包含数字，字母，下划线时会被缓存，但字符串长度不能大于<span class="number">20</span></span><br></pre></td></tr></table></figure></p><p><img src="D:\周末四期\L002\assets\1557741069674.png" alt="1557741069674"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）指定驻留</span></span><br><span class="line"><span class="comment"># 从 sys模块 引入 intern 函数  让a，b两个变量指向同一个值</span></span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> intern</span><br><span class="line">    a = intern(<span class="string">'大帅锅&amp;*^^1234'</span>*<span class="number">10</span>)</span><br><span class="line">    b = intern(<span class="string">'大帅锅&amp;*^^1234'</span>*<span class="number">10</span>)</span><br><span class="line">    print(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="comment">#可以指定任意字符串加入到小数据池中,无论声明多少个变量,只要此值相同,都指向同一个地址空间</span></span><br></pre></td></tr></table></figure></p><h4 id="2-6-3-缓存机制的意义"><a href="#2-6-3-缓存机制的意义" class="headerlink" title="2.6.3 缓存机制的意义"></a>2.6.3 缓存机制的意义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无论是变量缓存机制还是小数据池的驻留机制,都是为了节省内存空间,提升代码效率</span><br></pre></td></tr></table></figure><p><img src="D:\周末四期\L002\assets\1557741277521.png" alt="1557741277521"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-简介-注释-变量-数据类型-运算符-缓存机制&quot;&gt;&lt;a href=&quot;#python-简介-注释-变量-数据类型-运算符-缓存机制&quot; class=&quot;headerlink&quot; title=&quot;python 简介 注释 变量 数据类型 运算符 缓存机制&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="后端" scheme="http:/categories/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="python" scheme="http:/categories/%E5%90%8E%E7%AB%AF/python/"/>
    
    
      <category term="python" scheme="http:/tags/python/"/>
    
      <category term="解释器" scheme="http:/tags/%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    
      <category term="变量" scheme="http:/tags/%E5%8F%98%E9%87%8F/"/>
    
      <category term="数据类型" scheme="http:/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="运算符" scheme="http:/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http:/2019/07/02/%E8%80%81%E7%94%B7%E5%AD%A9python/"/>
    <id>http:/2019/07/02/老男孩python/</id>
    <published>2019-07-02T14:02:04.544Z</published>
    <updated>2019-07-02T14:08:46.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2-1python认知"><a href="#2-1python认知" class="headerlink" title="2.1python认知"></a>2.1python认知</h3><p><img src="D:\周末四期\L002\assets\1557736597833.png" alt="1557736597833"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### (1)python 简介</span></span><br><span class="line">    <span class="number">89</span>年开发的语言,创始人范罗苏姆(Guido van Rossum),别称:龟叔(Guido). </span><br><span class="line">    python具有非常多并且强大的第三方库,使得程序开发起来得心应手. </span><br><span class="line">    Python程序员的信仰:人生苦短,我用python!</span><br><span class="line">    开发方向： 机器学习人工智能 ，自动化运维&amp;测试 ，数据分析&amp;爬虫 ，python全栈开发</span><br><span class="line"> </span><br><span class="line"><span class="comment"># ### (2)python 版本</span></span><br><span class="line">    python <span class="number">2.</span>x 版本，官方在 <span class="number">2020</span> 年停止支持,原码不规范,重复较多</span><br><span class="line">    python <span class="number">3.</span>x 版本，功能更加强大且修复了很多bug,原码清晰,简单</span><br><span class="line"></span><br><span class="line"><span class="comment"># ### (3)编译型与解释型语言区别:</span></span><br><span class="line">编译型:一次性,把所有代码编译成机器能识别的二进制码,在运行</span><br><span class="line">代表语言:c,c++</span><br><span class="line">优点: 执行速度块</span><br><span class="line">缺点: 开发速度慢,调试周期长</span><br><span class="line"></span><br><span class="line">解释型:代码从上到下一行一行解释并运行 </span><br><span class="line">代表语言:python,php</span><br><span class="line">优点: 开发效率快,调试周期短</span><br><span class="line">缺点: 执行速度相对慢</span><br><span class="line">*linux 操作系统默认支持python语言，可直接使用</span><br><span class="line"></span><br><span class="line"><span class="comment"># ### (4)python的解释器:</span></span><br><span class="line">    (<span class="number">1</span>)Cpython(官方推荐)</span><br><span class="line">    把python转化成c语言能识别的二进制码</span><br><span class="line">    (<span class="number">2</span>)Jpython</span><br><span class="line">    把python转化成java语言能识别的二进制码</span><br><span class="line">    (<span class="number">3</span>)其他语言解释器</span><br><span class="line">    把python转化成其他语言能识别的二进制码</span><br><span class="line">    (<span class="number">4</span>)PyPy</span><br><span class="line">    将所有代码一次性编译成二进制码,加快执行效率(模仿编译型语言的一款python解释器)</span><br></pre></td></tr></table></figure><h3 id="2-2注释-就是对代码的解释-方便大家阅读python代码"><a href="#2-2注释-就是对代码的解释-方便大家阅读python代码" class="headerlink" title="2.2注释: 就是对代码的解释 方便大家阅读python代码"></a>2.2注释: 就是对代码的解释 方便大家阅读python代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)注释的分类</span><br><span class="line">(<span class="number">2</span>)注释的注意点</span><br><span class="line">(<span class="number">3</span>)注释的排错性</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)注释的分类 ： <span class="number">1.</span>单行注释 <span class="number">2.</span>多行注释</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.单行注释   以#号开头 ，右边的所有东西都被当做说明文字 ，程序不进行编译运行。</span></span><br><span class="line">    print(‘hello world’)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2.多行注释   三个单引号 或 三个双引号</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    这是第一行</span></span><br><span class="line"><span class="string">    这是第二行</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    </span><br><span class="line">(<span class="number">2</span>)注释的注意点</span><br><span class="line">如果外面使用三个单引号，里面使用三个双引号，反之亦然。</span><br><span class="line">(<span class="number">3</span>)注释的排错性</span><br><span class="line">先注释一部分代码，然后执行另外一部分，看看是否报错，逐层缩小报错范围，找到最终错误点。</span><br></pre></td></tr></table></figure><h3 id="2-3变量-可以改变的量-实际具体指的是内存中的一块存储空间"><a href="#2-3变量-可以改变的量-实际具体指的是内存中的一块存储空间" class="headerlink" title="2.3变量: 可以改变的量,实际具体指的是内存中的一块存储空间"></a>2.3变量: 可以改变的量,实际具体指的是内存中的一块存储空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1)变量的概念</span><br><span class="line">(2)变量的声明</span><br><span class="line">(3)变量的命名</span><br><span class="line">(4)变量的交换</span><br><span class="line"></span><br><span class="line">* 常量就是不可改变的量,python当中没有明确定义常量的关键字,</span><br><span class="line">  所以约定俗成把变量名大写就是常量,表示不可改变</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)变量的概念: 可以改变的量就是变量。具体指代的是内存的一块空间</span><br><span class="line">(<span class="number">2</span>)变量的声明:</span><br><span class="line"><span class="comment">#1. a = 1 , b = 2</span></span><br><span class="line"><span class="comment">#2. a,b = 1,2</span></span><br><span class="line"><span class="comment">#3. a = b = 3</span></span><br><span class="line">(<span class="number">3</span>)变量的命名:</span><br><span class="line">    <span class="comment">#字母数字下划线 ，首字符不能为数字</span></span><br><span class="line">    <span class="comment">#严格区分大小写 ，且不能使用关键字</span></span><br><span class="line">    <span class="comment">#变量命名有意义 ，且不能使用中文哦</span></span><br><span class="line">(<span class="number">4</span>)变量的交换:</span><br><span class="line">    <span class="comment">#a,b = b,a</span></span><br></pre></td></tr></table></figure><h3 id="2-4python六大标准数据类型"><a href="#2-4python六大标准数据类型" class="headerlink" title="2.4python六大标准数据类型:"></a>2.4python六大标准数据类型:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ### 数据类型分类：</span></span><br><span class="line">(<span class="number">1</span>)Number   数字类型 (int  float  bool  complex)</span><br><span class="line">(<span class="number">2</span>)str    字符串类型    </span><br><span class="line">(<span class="number">3</span>)list列表类型      </span><br><span class="line">(<span class="number">4</span>)tuple元组类型     </span><br><span class="line">(<span class="number">5</span>)set集合类型     </span><br><span class="line">(<span class="number">6</span>)dict字典类型      </span><br><span class="line"></span><br><span class="line"><span class="comment"># ### Number数字类型分类：</span></span><br><span class="line">int :    整数类型    ( 正整数 <span class="number">0</span> 负整数 )</span><br><span class="line">float:   浮点数类型  ( <span class="number">1</span>普通小数 <span class="number">2</span>科学计数法表示的小数 例:a = <span class="number">3e-5</span>  <span class="comment">#3e-05 )</span></span><br><span class="line">bool:    布尔值类型  ( 真<span class="literal">True</span> 和 假<span class="literal">False</span> )</span><br><span class="line">complex: 复数类型    ( 声明复数的<span class="number">2</span>种方法 ) (复数用作于科学计算中,表示高精度的数据,科学家会使用)</span><br><span class="line">                    </span><br><span class="line"><span class="comment"># ### 容器类型分类：五个</span></span><br><span class="line">str   <span class="string">"nihao"</span></span><br><span class="line">list   [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">tuple  (<span class="number">6</span>，<span class="number">7</span>，<span class="number">8</span>)</span><br><span class="line">set    &#123;<span class="string">'a'</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">dict   &#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-1自动类型转换"><a href="#2-4-1自动类型转换" class="headerlink" title="2.4.1自动类型转换"></a>2.4.1自动类型转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当<span class="number">2</span>个不同类型的数据进行运算的时候,默认向更高精度转换</span><br><span class="line">数据类型精度从低到高:  bool int float complex</span><br></pre></td></tr></table></figure><h4 id="2-4-2强制类型转换"><a href="#2-4-2强制类型转换" class="headerlink" title="2.4.2强制类型转换"></a>2.4.2强制类型转换</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --&gt;Number部分</span></span><br><span class="line">int :     整型   浮点型 布尔类型  纯数字字符串</span><br><span class="line">float:    整型   浮点型 布尔类型  纯数字字符串</span><br><span class="line">complex:  整型   浮点型 布尔类型  纯数字字符串 (复数)</span><br><span class="line">bool:   ( 容器类型数据  /  Number类型数据 都可以 )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --&gt;容器类型部分</span></span><br><span class="line">str:  ( 容器类型数据  /  Number类型数据 都可以 )</span><br><span class="line">list:    字符串 列表 元组 集合 字典</span><br><span class="line">tuple:   字符串 列表 元组 集合 字典</span><br><span class="line">set:     字符串 列表 元组 集合 字典    (注意:相同的值,只会保留一份)</span><br><span class="line">dict:  使用 二级列表,二级元组,二级集合(里面的容器数据只能是元组)</span><br></pre></td></tr></table></figure><h4 id="2-4-3字典和集合的注意点"><a href="#2-4-3字典和集合的注意点" class="headerlink" title="2.4.3字典和集合的注意点"></a>2.4.3字典和集合的注意点</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ###哈希算法</span></span><br><span class="line"><span class="comment">#定义:</span></span><br><span class="line">    把不可变的任意长度值计算成固定长度的唯一值,这个值可正可负,可大可小,但长度固定</span><br><span class="line">    该算法叫哈希算法(散列算法)，这个固定长度值叫哈希值(散列值)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#特点:</span></span><br><span class="line"><span class="number">1.</span>计算出来的值长度固定且该值唯一</span><br><span class="line">    <span class="number">2.</span>该字符串是密文，且加密过程不可逆</span><br><span class="line">    </span><br><span class="line"><span class="comment">#用哈希计算得到一个字符串的用意？</span></span><br><span class="line">    例如：比对两个文件的内容是否一致？</span><br><span class="line">    例如：比对输入的密码和数据库存储的密码是否一致</span><br><span class="line">    </span><br><span class="line"><span class="comment">#字典的键和集合中的值都是唯一值,不可重复:</span></span><br><span class="line">为了保证数据的唯一性，</span><br><span class="line">    用哈希算法加密字典的键得到一个字符串。</span><br><span class="line">    用哈希算法加密集合的值得到一个字符串。</span><br><span class="line">如果重复，他们都是后面的替换前面的。自动去重</span><br><span class="line"></span><br><span class="line"><span class="comment">#版本:</span></span><br><span class="line">    <span class="number">3.6</span>版本之前都是 字典和集合都是无序的</span><br><span class="line">    <span class="number">3.6</span>版本之后,把字典的字面顺序记录下来，当从内存拿数据的时候，</span><br><span class="line">    根据字面顺序重新排序，所以看起来像有序,但本质上无序</span><br><span class="line"></span><br><span class="line">可哈希数据:</span><br><span class="line">可哈希的数据  (不可变的数据)：Number(int float bool complex) str tuple</span><br><span class="line">不可哈希的数据 (可变的数据)： list set dict</span><br></pre></td></tr></table></figure><h3 id="2-5python运算符"><a href="#2-5python运算符" class="headerlink" title="2.5python运算符"></a>2.5python运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)算数运算符:  + - * / // % **</span><br><span class="line">(<span class="number">2</span>)比较运算符:  &gt; &lt; &gt;= &lt;= == !=   </span><br><span class="line">(<span class="number">3</span>)赋值运算符:  = += -= *= /= //= %= **=</span><br><span class="line">(<span class="number">4</span>)成员运算符:  <span class="keyword">in</span> 和 <span class="keyword">not</span> <span class="keyword">in</span> (针对于容器型数据)</span><br><span class="line">(<span class="number">5</span>)身份运算符:  <span class="keyword">is</span> 和 <span class="keyword">is</span> <span class="keyword">not</span> (检测两个数据在内存当中是否是同一个值)  </span><br><span class="line">(<span class="number">6</span>)逻辑运算符:  <span class="keyword">and</span> <span class="keyword">or</span> <span class="keyword">not</span></span><br><span class="line">(<span class="number">7</span>)位运算符:    &amp; | ~ ^ &lt;&lt; &gt;&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>python运算符</th><th>注意点</th></tr></thead><tbody><tr><td>算数运算符</td><td>% 取余   ， //地板除  ， ** 幂运算</td></tr><tr><td>比较运算符</td><td>== 比较两个值是否相等    != 比较两个值是否不同</td></tr><tr><td>赋值运算符</td><td>a += 1  =&gt;  a = a+1</td></tr><tr><td>成员运算符</td><td>in 或 not in 判断某个值是否包含在(或不在)一个容器类型数据当中</td></tr><tr><td>身份运算符</td><td>is 和 is not  用来判断内存地址是否相同</td></tr><tr><td>逻辑运算符</td><td>优先级 () &gt; not &gt; and  &gt; or</td></tr><tr><td>位运算符</td><td>优先级 (&lt;&lt;或 &gt;&gt; )  &gt; &amp;  &gt;  ^  &gt; \</td><td>5 &lt;&lt; 1 结果：10  ,   5 &gt;&gt; 1 结果：2</td></tr></tbody></table><h3 id="2-6数据在内存中的缓存机制"><a href="#2-6数据在内存中的缓存机制" class="headerlink" title="2.6数据在内存中的缓存机制"></a>2.6数据在内存中的缓存机制</h3><h4 id="2-6-1在同一文件-模块-里-变量存储的缓存机制-仅对python3-6版本负责"><a href="#2-6-1在同一文件-模块-里-变量存储的缓存机制-仅对python3-6版本负责" class="headerlink" title="2.6.1在同一文件(模块)里,变量存储的缓存机制  (仅对python3.6版本负责)"></a>2.6.1在同一文件(模块)里,变量存储的缓存机制  (仅对python3.6版本负责)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --&gt;Number 部分</span></span><br><span class="line"><span class="number">1.</span>对于整型而言，<span class="number">-5</span>~正无穷范围内的相同值 id一致</span><br><span class="line"><span class="number">2.</span>对于浮点数而言，非负数范围内的相同值 id一致</span><br><span class="line"><span class="number">3.</span>布尔值而言,值相同情况下，id一致</span><br><span class="line"><span class="number">4.</span>复数在 实数+虚数 这样的结构中永不相同(只有虚数的情况例外)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --&gt;容器类型部分</span></span><br><span class="line"><span class="number">5.</span>字符串 和 空元组 相同的情况下，地址相同</span><br><span class="line"><span class="number">6.</span>列表，元组，字典，集合无论什么情况 id标识都不同 [空元组例外]</span><br></pre></td></tr></table></figure><h4 id="2-6-2不同文件-模块-里-部分数据驻留小数据池中-仅对python3-6版本负责-了解"><a href="#2-6-2不同文件-模块-里-部分数据驻留小数据池中-仅对python3-6版本负责-了解" class="headerlink" title="2.6.2不同文件(模块)里,部分数据驻留小数据池中 (仅对python3.6版本负责 了解)"></a>2.6.2不同文件(模块)里,部分数据驻留小数据池中 (仅对python3.6版本负责 了解)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">小数据池只针对：int,str,bool，空元祖(),<span class="literal">None</span>关键字   这些数据类型有效</span><br><span class="line"><span class="comment">#(1)对于int而言</span></span><br><span class="line">    python在内存中创建了<span class="number">-5</span> ~ <span class="number">256</span> 范围的整数,提前驻留在了内存的一块区域.</span><br><span class="line">    如果是不同文件(模块)的两个变量,声明同一个值，在<span class="number">-5</span>~<span class="number">256</span>这个范围里，</span><br><span class="line">    那么id一致.让两个变量的值都同时指向一个值的地址，节省空间。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#(2)对于str来说:</span></span><br><span class="line"><span class="number">1.</span>字符串的长度为<span class="number">0</span>或者<span class="number">1</span>，默认驻留小数据池</span><br></pre></td></tr></table></figure><p><img src="D:\周末四期\L002\assets\1557740809484.png" alt="1557740809484"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>字符串的长度&gt;<span class="number">1</span>,且只含有大小写字母，数字，下划线时，默认驻留小数据池</span><br></pre></td></tr></table></figure></p><p><img src="D:\周末四期\L002\assets\1557740921885.png" alt="1557740921885"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>用*号得到的字符串，分两种情况。</span><br><span class="line">       <span class="number">1</span>)乘数等于<span class="number">1</span>时: 无论什么字符串 * <span class="number">1</span> , 都默认驻留小数据池       </span><br><span class="line">       <span class="number">2</span>)乘数大于<span class="number">1</span>时: 乘数大于<span class="number">1</span>，仅包含数字，字母，下划线时会被缓存，但字符串长度不能大于<span class="number">20</span></span><br></pre></td></tr></table></figure></p><p><img src="D:\周末四期\L002\assets\1557741069674.png" alt="1557741069674"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#（3）指定驻留</span></span><br><span class="line"><span class="comment"># 从 sys模块 引入 intern 函数  让a，b两个变量指向同一个值</span></span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> intern</span><br><span class="line">    a = intern(<span class="string">'大帅锅&amp;*^^1234'</span>*<span class="number">10</span>)</span><br><span class="line">    b = intern(<span class="string">'大帅锅&amp;*^^1234'</span>*<span class="number">10</span>)</span><br><span class="line">    print(a <span class="keyword">is</span> b)</span><br><span class="line"><span class="comment">#可以指定任意字符串加入到小数据池中,无论声明多少个变量,只要此值相同,都指向同一个地址空间</span></span><br></pre></td></tr></table></figure></p><h4 id="2-6-3-缓存机制的意义"><a href="#2-6-3-缓存机制的意义" class="headerlink" title="2.6.3 缓存机制的意义"></a>2.6.3 缓存机制的意义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无论是变量缓存机制还是小数据池的驻留机制,都是为了节省内存空间,提升代码效率</span><br></pre></td></tr></table></figure><p><img src="D:\周末四期\L002\assets\1557741277521.png" alt="1557741277521"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2-1python认知&quot;&gt;&lt;a href=&quot;#2-1python认知&quot; class=&quot;headerlink&quot; title=&quot;2.1python认知&quot;&gt;&lt;/a&gt;2.1python认知&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;D:\周末四期\L002\assets\1557
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jQuery表单验证</title>
    <link href="http:/2019/07/02/hello-world/"/>
    <id>http:/2019/07/02/hello-world/</id>
    <published>2019-07-02T02:58:20.881Z</published>
    <updated>2019-07-02T13:40:41.652Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="前端" scheme="http:/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="jQuery" scheme="http:/categories/%E5%89%8D%E7%AB%AF/jQuery/"/>
    
    
      <category term="jQuery" scheme="http:/tags/jQuery/"/>
    
      <category term="表格" scheme="http:/tags/%E8%A1%A8%E6%A0%BC/"/>
    
      <category term="表单验证" scheme="http:/tags/%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
    
  </entry>
  
</feed>
